@mixin absolute-full() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin for-tablet-portait-only {
  @media (min-width: 600px) and (max-width: 899px) { @content; }
}
@mixin for-tablet-landscape-up {
  @media (min-width: 900px) { @content; }
}
@mixin for-tablet-landscape-only {
  @media (min-width: 900px) and (max-width: 1199px) { @content; }
}
@mixin for-desktop-up {
  @media (min-width: 1200px) { @content; }
}
@mixin for-desktop-only {
  @media (min-width: 1200px) and (max-width: 1799px) { @content; }
}
@mixin for-big-desktop-up {
  @media (min-width: 1800px) { @content; }
}
@mixin for-phone-only {
  @media (max-width: 599px) { @content; }
}
@mixin for-tablet-portrait-up {
  @media (min-width: 600px) { @content; }
}

@keyframes error {
  from { transform: translateY(-50%); opacity: 0; visibility: hidden; }
  to   { transform: translateY(0%); opacity: 1; visibility: visible; }
}

// This mixin will allow you to choose whether you want a just rem or both rem and a px fallback

$pxFallback: YES; // set to NO if you want only rem (no matter if you supply px or rem) or set to YES if you want both rem and fallback px values

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) { // you can use either px or rem, doesn't matter
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  }
  @else {
    @if $pxFallback == "YES" {
      #{$property}: $px;
      #{$property}: $rem;
    }
    @else {
      #{$property}: $rem;
    }
  }
}